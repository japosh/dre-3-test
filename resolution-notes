==== user/role inexistente no postgres
-> Identificado por meio dos logs do compose ('role "airflow" does not exist')

linha 31 compose.yaml
 environment:
      POSTGRES_USER: admin
 environment:
      POSTGRES_USER: airflow
# [ALT] Criar user airflow no postgres
# psql -U admin -d airflow
# CREATE USER airflow WITH PASSWORD 'airflow';
# GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO airflow;
# GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO airflow;

==== fix volume bind dags
-> Identificado antes mesmo de um efeitov problema, pois fiz uma pré analise do compose.yaml antes de tentar provisionar e vi que o path do repo não batia com o mount.

linha 14 compose.yaml
volumes:
    - ./dag:/opt/airflow/dags
volumes:
    - ./dags:/opt/airflow/dags

==== fix health check webserver airflow
-> Identificado também antes do provisionamento, onde de cara notei que a porta não fazia sentido e apenas adequei a porta que o serviço utiliza (também validando pós provisionamento com um hit no /health para verificar o response).

linha 58 compose.yaml
healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:xxxx/health"]
healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]

==== troca UID no airflow-common
-> O step do airflow-init não estava conseguindo conceder o permissionamento dos diretórios no startup e consequentemente ao rodar um DAG o Airflow não tinha permissão para escrever o  log da execução da DAG.

linha 17 compose.yaml
user: "5000"
user: "1000"
UID do usuário executor do compose (meu UID)

==== fix syntax DAG
-> O próprio Airflow indicou pela UI um problema no import da DAG apontando o erro de sintaxe no código.

linha 12 smooth.py
def smooth() <- faltando dois pontos
def smooth():